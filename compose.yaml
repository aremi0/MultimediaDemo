services:

  ############################# Kafka #############################
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    expose:
      - 9092
      - 9093
    environment:
      - KAFKA_ENABLE_KRAFT=true
      - KAFKA_KRAFT_CLUSTER_ID=kafka-cluster-id
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    networks:
      - multimedia

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - 8085:8080
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    networks:
      - multimedia
  ##########################################################

  ########################## Server per OAuth2 ##########################
  keycloak:
    image: quay.io/keycloak/keycloak:26.1.4
    container_name: keycloak
    command: [ "start", "--hostname", "https://localhost", "--hostname-strict", "false", "--proxy-headers", "xforwarded" ]
    environment:
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://keycloak-db:5432/keycloak
      - KC_DB_USERNAME=keycloak
      - KC_DB_PASSWORD=keycloak
      - KC_HTTP_ENABLED=true
      - KC_HTTP_PORT=8081
      - KC_BOOTSTRAP_ADMIN_USERNAME=admin
      - KC_BOOTSTRAP_ADMIN_PASSWORD=admin
      #- KC_IMPORT=/opt/keycloak/data/import/multimedia-realm.json
      # settings del reverse-proxy inserite sul command per usare la configurazione hostname v2 introdotta con keycloak 21+
    expose:
      - 8081
    #volumes:
    #  - ./realms:/opt/keycloak/data/import
    networks:
      - multimedia
    depends_on:
      - keycloak-postgres

  keycloak-postgres:
    image: postgres:15
    container_name: keycloak-db
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    restart: unless-stopped
    expose:
      - 5432
    volumes:
      - keycloak_data:/var/lib/postgresql/data
    networks:
      - multimedia
  ##########################################################

  ############################# HTTPS #############################
  nginx-https:
    image: nginx:latest
    container_name: nginx-https
    volumes:
      - ./nginx/https.conf:/etc/nginx/conf.d/default.conf
      - ./certs:/etc/nginx/certs
    ports:
      - 443:443
    depends_on:
      - gatewayService
      - keycloak # Questo container funge anche da reverse-proxy usato per evitare di esporre keycloak fuori dalla subnet, permettendo comunque al browser di interfacciarsi con la dashboard di keycloak
      - frontend
    networks:
      - multimedia
  #################################################################

  ############################# Load Balancing / ApiGateway #############################
  eurekaServer:
    image: eclipse-temurin:21-jre
    container_name: eureka-server
    volumes:
      - ./EurekaServer/target/EurekaServer-0.0.1-SNAPSHOT.jar:/app.jar
    working_dir: /app
    command: ["java", "-jar", "/app.jar"]
    ports:
      - 8761:8761
    networks:
      - multimedia

  gatewayService:
    image: eclipse-temurin:21-jre # Usa una base con Java 21
    container_name: gateway-service
    volumes:
      - ./ApiGateway/target/ApiGateway-0.0.1-SNAPSHOT.jar:/app.jar
    working_dir: /app
    command: ["java", "-jar", "/app.jar"]
    networks:
      - multimedia
    expose:
      - 8080
    depends_on:
      - eurekaServer
      - keycloak
  ##########################################################

  ############################# Servizi... #############################
  frontend:
    image: nginx:latest
    container_name: frontend
    volumes:
      - ./frontend/src:/usr/share/nginx/html:ro
    networks:
      - multimedia
    expose:
      - 80

  demoService1:
    image: eclipse-temurin:21-jre # Usa una base con Java 21
    container_name: demo-service-1
    volumes:
      - ./DemoService/target/DemoService-0.0.1-SNAPSHOT.jar:/app.jar
    working_dir: /app
    command: ["java", "-jar", "/app.jar"]
    networks:
      - multimedia
    depends_on:
      - eurekaServer
      - keycloak

  demoService2:
    image: eclipse-temurin:21-jre # Usa una base con Java 21
    container_name: demo-service-2
    volumes:
      - ./DemoService/target/DemoService-0.0.1-SNAPSHOT.jar:/app.jar
    working_dir: /app
    command: ["java", "-jar", "/app.jar"]
    networks:
      - multimedia
    depends_on:
      - eurekaServer
      - keycloak

volumes:
  keycloak_data:

networks:
  multimedia:
    name: multimedia
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

# docker-compose up
# oppure in modalit√† detatched per non bloccare il terminale
# docker-compose up -d