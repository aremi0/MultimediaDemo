services:

  ############################# Kafka #############################
  kafka:
    image: ${KAFKA_VERSION}
    container_name: kafka
    expose:
      - 9092
      - 9093
    environment:
      - KAFKA_ENABLE_KRAFT=true
      - KAFKA_KRAFT_CLUSTER_ID=kafka-cluster-id
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    networks:
      - multimedia

  kafka-ui:
    image: ${KAFKA_UI_VERSION}
    container_name: kafka-ui
    ports:
      - 8085:8080
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    networks:
      - multimedia
  ##########################################################

  ########################## Server per OAuth2 ##########################
  keycloak:
    image: ${KEYCLOAK_VERSION}
    container_name: keycloak
    command: [ "start" ]
    environment:
      - KC_HOSTNAME=https://${ENTRYPOINT_DOMAIN_NAME}
      - KC_PROXY_ADDRESS_FORWARDING=true
      - KC_PROXY_HEADERS=xforwarded
      - KC_BOOTSTRAP_ADMIN_USERNAME=${KC_BOOTSTRAP_ADMIN_USERNAME}
      - KC_BOOTSTRAP_ADMIN_PASSWORD=${KC_BOOTSTRAP_ADMIN_PASSWORD}
      # Configurazioni per la connessione al db
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://keycloak-db:5432/keycloak
      - KC_DB_USERNAME=${POSTGRES_USER}
      - KC_DB_PASSWORD=${POSTGRES_PASSWORD}
      # Configurazioni HTTPS
      - KC_HTTPS_CERTIFICATE_FILE=/opt/keycloak/certs/cert.pem
      - KC_HTTPS_CERTIFICATE_KEY_FILE=/opt/keycloak/certs/key.pem
      - KC_HTTP_ENABLED=false
      # Opzionali per migliorare le  performance
      - KC_DB_POOL_INITIAL_SIZE=5
      - KC_DB_POOL_MIN_SIZE=5
      - KC_DB_POOL_MAX_SIZE=20
      - KC_CACHE=local  # Se non serve clustering
    volumes:
      - ./certs:/opt/keycloak/certs:ro
    networks:
      - multimedia
    depends_on:
      - keycloak-postgres

  keycloak-postgres:
    image: ${POSTGRES_VERSION}
    container_name: keycloak-db
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    restart: unless-stopped
    expose:
      - 5432
    volumes:
      - keycloak_data:/var/lib/postgresql/data
    networks:
      - multimedia
  ##########################################################

  ############################# HTTPS #############################
  # Reverse Proxy di ingresso
  multimedia-entrypoint:
    image: ${NGINX_VERSION}
    container_name: multimedia-entrypoint
    environment:
      DOMAIN_NAME: ${ENTRYPOINT_DOMAIN_NAME}
    entrypoint: [ "/bin/sh", "-c", "tr -d '\r' < /entrypoint.sh | sh" ] # Conversione CRLF→LF al volo con 'tr' (dos2unix)
    volumes:
      - ./nginx/https.template.conf:/etc/nginx/conf.d/default.conf.template:ro
      - ./nginx/entrypoint-inject.sh:/entrypoint.sh:ro
      - ./certs:/etc/nginx/certs:ro
      - nginx-logs:/var/log/nginx
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache/nginx:rw,size=20m # Mantiene in ram la cache, con un tetto massimo di 20mb
      - /var/run:rw,size=1m
      - /etc/nginx/conf.d:rw,size=1m
    ports:
      - 443:443
    depends_on:
      - keycloak # Questo container funge anche da reverse-proxy usato per evitare di esporre keycloak fuori dalla subnet, permettendo comunque al browser di interfacciarsi con la dashboard di keycloak
      - frontend
      - gatewayService
    networks:
      - multimedia

  log-forwarder:
    build:
      context: ./nginx/log-forwarder
      dockerfile: python-forwarder.dockerfile
    container_name: log-forwarder
    command: [ "python", "app.py"]
    environment:
      HEARTBEAT_INTERVAL: 30
      GRPC_TARGET: spring-kafka-producer:6565
      LOG_PATH: /var/log/nginx/access_real.log
      REQUEST_KAFKA_TOPIC: log.request.nginx-entrypoint
    volumes:
      - ./nginx/log-forwarder/log-forwarder.py:/app/app.py:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - multimedia-entrypoint
      - spring-kafka-producer
    networks:
      - multimedia
  #################################################################

  ############################# Load Balancing / ApiGateway #############################
  eurekaServer:
    image: ${JAVA_VERSION}
    container_name: eureka-server
    volumes:
      - ./EurekaServer/target/EurekaServer-0.0.1-SNAPSHOT.jar:/app/service.jar:ro
    working_dir: /app
    command: ["java", "-jar", "/app/service.jar"]
    ports:
      - 8761:8761
    networks:
      - multimedia

  gatewayService:
    image: ${JAVA_VERSION}
    container_name: gateway-service
    volumes:
      - ./ApiGateway/target/ApiGateway-0.0.1-SNAPSHOT.jar:/app/service.jar:ro
    working_dir: /app
    command: ["java", "-jar", "/app/service.jar"]
    environment:
      KAFKA_PRODUCER_HOSTNAME: spring-kafka-producer
      KAFKA_PRODUCER_PORT: 6565
      REQUEST_KAFKA_TOPIC: log.request.api-gateway
    networks:
      - multimedia
    expose:
      - 8080
    depends_on:
      - eurekaServer
      - keycloak
  ##########################################################

  ############################# Servizi... #############################
  frontend:
    image: ${NGINX_VERSION}
    container_name: frontend
    environment:
      DOMAIN_NAME: ${ENTRYPOINT_DOMAIN_NAME}
    entrypoint: [ "/bin/sh", "-c", "tr -d '\r' < /entrypoint.sh | sh" ] # Conversione CRLF→LF al volo con 'tr' (dos2unix)
    volumes:
      - ./frontend/src:/usr/share/nginx/html-ro:ro
      - ./frontend/src/entrypoint-inject.sh:/entrypoint.sh:ro
    read_only: true
    tmpfs:
      - /usr/share/nginx/html:rw,size=2m
      - /tmp
      - /var/run:rw,size=1m
      - /var/cache/nginx:rw,size=20m
    networks:
      - multimedia
    expose:
      - 80
    depends_on:
      - keycloak

  spring-kafka-producer:
    image: ${JAVA_VERSION}
    container_name: spring-kafka-producer
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      DEFAULT_REQUEST_KAFKA_TOPIC: log.request.default
    volumes:
      - ./KafkaProducerService/target/KafkaProducerService-0.0.1-SNAPSHOT.jar:/app/service.jar:ro
    working_dir: /app
    command: ["java", "-jar", "/app/service.jar"]
    networks:
      - multimedia
    depends_on:
      - kafka

  demoService1:
    image: ${JAVA_VERSION}
    container_name: demo-service-1
    volumes:
      - ./DemoService/target/DemoService-0.0.1-SNAPSHOT.jar:/app/service.jar:ro
      - ./certs/multimedia-keystore.p12:/app/keystore.p12:ro
    working_dir: /app
    command: [
      "java",
      "-Djavax.net.ssl.trustStore=/app/keystore.p12",
      "-Djavax.net.ssl.trustStorePassword=${TRUSTSTORE_PASSWORD}",
      "-Djavax.net.ssl.trustStoreType=PKCS12",
      "-jar",
      "/app/service.jar"
    ]
    environment:
      KAFKA_PRODUCER_HOSTNAME: spring-kafka-producer
      KAFKA_PRODUCER_PORT: 6565
      REQUEST_KAFKA_TOPIC: log.request.demo-service
      TRUSTSTORE_PASSWORD: ${TRUSTSTORE_PASSWORD}
    networks:
      - multimedia
    depends_on:
      - eurekaServer
      - keycloak
      - spring-kafka-producer
      - gatewayService

  demoService2:
    image: ${JAVA_VERSION}
    container_name: demo-service-2
    volumes:
      - ./DemoService/target/DemoService-0.0.1-SNAPSHOT.jar:/app/service.jar:ro
      - ./certs/multimedia-keystore.p12:/app/keystore.p12:ro
    working_dir: /app
    command: [
      "java",
      "-Djavax.net.ssl.trustStore=/app/keystore.p12",
      "-Djavax.net.ssl.trustStorePassword=${TRUSTSTORE_PASSWORD}",
      "-Djavax.net.ssl.trustStoreType=PKCS12",
      "-jar",
      "/app/service.jar"
    ]
    environment:
      KAFKA_PRODUCER_HOSTNAME: spring-kafka-producer
      KAFKA_PRODUCER_PORT: 6565
      REQUEST_KAFKA_TOPIC: log.request.demo-service
      TRUSTSTORE_PASSWORD: ${TRUSTSTORE_PASSWORD}
    networks:
      - multimedia
    depends_on:
      - eurekaServer
      - keycloak
      - spring-kafka-producer
      - gatewayService

volumes:
  keycloak_data:
  nginx-logs:

networks:
  multimedia:
    name: multimedia
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

# docker-compose --env-file .env.dev up
# oppure in modalità detatched per non bloccare il terminale
# docker-compose --env-file .env.dev.prod up -d