services:

  ############################# Kafka #############################
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    expose:
      - "9092"
      - "9093"
    environment:
      - KAFKA_ENABLE_KRAFT=true
      - KAFKA_KRAFT_CLUSTER_ID=kafka-cluster-id
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    networks:
      - multimedia

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - 8085:8080
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    networks:
      - multimedia
  ##########################################################

  ########################## Server per OAuth2 ##########################
  keycloak:
    image: quay.io/keycloak/keycloak:26.1.4
    container_name: keycloak
    command: [ "start-dev" ]
    ports:
      - 8081:8080
    environment:
      - KC_BOOTSTRAP_ADMIN_USERNAME=admin
      - KC_BOOTSTRAP_ADMIN_PASSWORD=admin
    networks:
      - multimedia
  ##########################################################

  ############################# Load Balancing / ApiGateway #############################
  eurekaServer:
    image: eclipse-temurin:21-jre
    container_name: eureka-server
    volumes:
      - ./EurekaServer/target/EurekaServer-0.0.1-SNAPSHOT.jar:/app.jar
    working_dir: /app
    command: ["java", "-jar", "/app.jar"]
    ports:
      - 8761:8761
    networks:
      - multimedia

  gatewayService:
    image: eclipse-temurin:21-jre # Usa una base con Java 21
    container_name: gateway-service
    volumes:
      - ./ApiGateway/target/ApiGateway-0.0.1-SNAPSHOT.jar:/app.jar
    working_dir: /app
    command: ["java", "-jar", "/app.jar"]
    networks:
      - multimedia
    ports:
      - 8080:8080 # Mappa la porta interna 8080 del container alla porta 8080 dell'host
    depends_on:
      - eurekaServer
  ##########################################################

  ############################# Servizi... #############################
  demoService1:
    image: eclipse-temurin:21-jre # Usa una base con Java 21
    container_name: demo-service-1
    volumes:
      - ./DemoService/target/DemoService-0.0.1-SNAPSHOT.jar:/app.jar
    working_dir: /app
    command: ["java", "-jar", "/app.jar"]
    networks:
      - multimedia
    depends_on:
      - eurekaServer

  demoService2:
    image: eclipse-temurin:21-jre # Usa una base con Java 21
    container_name: demo-service-2
    volumes:
      - ./DemoService/target/DemoService-0.0.1-SNAPSHOT.jar:/app.jar
    working_dir: /app
    command: ["java", "-jar", "/app.jar"]
    networks:
      - multimedia
    depends_on:
      - eurekaServer

networks:
  multimedia:
    name: multimedia
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

# docker-compose up
# oppure in modalit√† detatched per non bloccare il terminale
# docker-compose up -d